// Generated by CoffeeScript 1.3.3
(function() {

  namespace('timer.view');

  namespace('timer.model');

  namespace('timer.collection');

  namespace('timer.router');

  $(function() {
    timer.router = new timer.router.MainRouter();
    return Backbone.history.start({
      pushState: false
    });
  });

  /* --------------------------------------------
       Begin Slip.coffee
  --------------------------------------------
  */


  timer.model.Slip = Backbone.Model.extend({
    defaults: {
      'running': false,
      'description': '',
      'duration': 0
    }
  });

  /* --------------------------------------------
       Begin Slips.coffee
  --------------------------------------------
  */


  timer.collection.Slips = Backbone.Collection.extend({
    url: "" + window.BASE_URL + "/slips/",
    model: timer.model.Slip
  });

  /* --------------------------------------------
       Begin SlipsList.coffee
  --------------------------------------------
  */


  timer.view.SlipList = Backbone.View.extend({
    tagName: 'section',
    className: 'slips-list',
    initialize: function() {
      this.template = timer.templates.getTemplate('slips-list');
      return timer.slips.on('reset', this.render, this);
    },
    transitionIn: function() {
      var dfd;
      dfd = new $.Deferred();
      setTimeout(dfd.resolve, 1000);
      this.$el.addClass('animated fadeIn');
      return dfd.promise();
    },
    transitionOut: function() {
      var dfd;
      dfd = new $.Deferred();
      setTimeout(dfd.resolve, 1000);
      this.$el.addClass('fadeOut');
      return dfd.promise();
    },
    render: function() {
      var template;
      template = _.template(this.template);
      this.$el.html(template({
        slips: timer.slips.first(5)
      }));
      this.transitionIn();
      return this;
    }
  });

  /* --------------------------------------------
       Begin AddSlip.coffee
  --------------------------------------------
  */


  timer.view.AddSlip = Backbone.View.extend({
    tagName: 'section',
    className: 'add-slip',
    initialize: function() {
      return this.template = timer.templates.getTemplate('add-slip');
    },
    transitionIn: function() {
      var dfd;
      dfd = new $.Deferred();
      setTimeout(dfd.resolve, 1000);
      this.$el.addClass('animated fadeIn');
      return dfd.promise();
    },
    transitionOut: function() {
      var dfd;
      dfd = new $.Deferred();
      setTimeout(dfd.resolve, 1000);
      this.$el.addClass('fadeOut');
      return dfd.promise();
    },
    render: function() {
      var template;
      template = _.template(this.template);
      this.$el.html(template({}));
      this.transitionIn();
      return this;
    }
  });

  /* --------------------------------------------
       Begin TrackTime.coffee
  --------------------------------------------
  */


  timer.view.TrackTime = Backbone.View.extend({
    tagName: 'section',
    className: 'track-time',
    initialize: function() {
      log("New Track Time view initialized");
      this.template = timer.templates.getTemplate('track-time');
      this.model.on('change:running', this.toggleTimer, this);
      return this.startTrackingTime();
    },
    toggleTimer: function(model, running) {
      return this.startTrackingTime()(running ? void 0 : this.stopTrackingTime());
    },
    startTrackingTime: function() {
      return log("Start tracking time...");
    },
    stopTrackingTime: function() {
      return log("Stop tracking time.");
    },
    transitionIn: function() {
      var dfd;
      dfd = new $.Deferred();
      setTimeout(dfd.resolve, 1000);
      this.$el.addClass('animated fadeIn');
      return dfd.promise();
    },
    transitionOut: function() {
      var dfd;
      dfd = new $.Deferred();
      setTimeout(dfd.resolve, 1000);
      this.$el.addClass('fadeOut');
      this.model.set('running', false);
      return dfd.promise();
    },
    render: function() {
      var template;
      template = _.template(this.template);
      this.$el.html(template(this.model.toJSON()));
      this.transitionIn();
      return this;
    }
  });

  /* --------------------------------------------
       Begin Timer.coffee
  --------------------------------------------
  */


  timer.view.Timer = Backbone.View.extend({
    tagName: 'article',
    className: 'timer',
    initialize: function() {
      this.addSlipView = new timer.view.AddSlip();
      this.slipList = new timer.view.SlipList();
      return this.render();
    },
    trackTime: function() {
      var _this = this;
      return this.addSlipView.transitionOut().done(function() {
        var model;
        model = timer.slips.where({
          'running': true
        })[0];
        return _this.trackTimeView = new timer.view.TrackTime({
          model: model
        });
      });
    },
    reset: function() {
      var _this = this;
      return this.trackTimeView.transitionOut().done(function() {
        _this.trackTimeView.destroy();
        return _this.addSlipView.transitionIn();
      });
    },
    render: function() {
      this.$el.append(this.addSlipView.render().el);
      this.$el.append(this.slipList.render().el);
      $('#container').html(this.$el);
      return this;
    }
  });

  /* --------------------------------------------
       Begin MainRouter.coffee
  --------------------------------------------
  */


  timer.router.MainRouter = Backbone.Router.extend({
    routes: {
      'start/:term': 'startTimer',
      'stop/:term': 'stopTimer',
      'reset/:term': 'resetTimer'
    },
    initialize: function() {
      timer.templates = new TemplateController();
      timer.templates.addTemplate('track-time');
      timer.templates.addTemplate('add-slip');
      timer.templates.addTemplate('slips-list');
      timer.slips = new timer.collection.Slips();
      timer.view = new timer.view.Timer();
      return timer.slips.fetch();
    },
    startTimer: function(desc) {
      return log("Starting timer for " + desc);
    },
    stopTimer: function(desc) {
      return log("Stopping timer for " + desc);
    },
    resetTimer: function(desc) {
      return log("Resetting timer for " + desc);
    }
  });

}).call(this);
